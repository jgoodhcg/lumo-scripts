#!/usr/bin/env lumo
;; -*- mode: clojurescript -*-

(require '[cljs.pprint :refer [pprint]]
         '[lumo.io :as io]
         '[cljs.reader :refer [read-string]]
            )

(def paths *command-line-args*)

(def files (map #(io/slurp %) paths))

(def raw-data (flatten (map #(-> %
                                 ;; TODO create command line arguments to distinguish
                                 ;; between log.md files
                                 ;; that need the commented out section below
                                 ;; and edn time log files that can just be read

                                 ;; (.split "## Time log")
                                 ;; (last)
                                 ;; (.split "```")
                                 ;; (nth 1)
                                 (read-string)
                                 ;; (butlast) ;; removes template
                                 )
                            files)))

(defn string->date [string]
  (as-> string s
    (.split s " ")
    (map js/parseInt s)
    (apply #(new js/Date %1 (- %2 1) ;; decrement month for sane data logging
                 %3 %4 %5) s)))

(defn filter-day-of-week [col day-of-week]
  "day-of-week is zero indexed"
  (filter (fn [event]
            (= day-of-week (.getDay (:start event) ;; when midnight straddle split is in affect it won't matter that we check start
                                    )))
          col))

(defn total-time [col]
  (.toFixed
   (->> col
        (reduce (fn [running event]
                  (let [time (- (.valueOf (:stop event))
                                (.valueOf (:start event)))
                        new-running (+ running time)]
                    new-running)
                  )
                0)
        (* (/ 1 1000)) ;; ms->s
        (* (/ 1 60))   ;; s->m
        (* (/ 1 60))   ;; m->h
        )
   2))

(defn float-str->dur [str]
  (let [split-up (.split str ".")
        hours (js/parseInt (first split-up))
        fraction (/ (js/parseInt (last split-up)) 100)
        minutes (* 60 fraction)]

    {:h hours :m (.round js/Math minutes)}))

(defn total-time-by-project [col]
  (->> col
       (group-by #(:project %))
       (map (fn [[project events]]
              {project
               (->> events
                    (total-time)
                    (float-str->dur))}))
       (sort #(compare (first (keys %1)) (first (keys %2))))))

(def data (->> raw-data
               (filter (fn [{:keys [start stop project description]}]
                         (and (some? start) (some? stop)
                              (not (empty? start))) (not (empty? stop))))
               (map (fn [{:keys [start stop project description]}]
                      (let [
                            start-time (string->date start)
                            stop-time  (string->date stop)
                            ]
                        ;; TODO make sure stop comes after start
                        ;; split straddling midnight by
                        ;; checking dates are different
                        ;; create two tasks and return [{} {}]
                        ;; flatten collection in (->> data)
                        {:start start-time
                         :stop stop-time
                         :project project
                         :description description})))
               ;; todo add validation of spec for entry and print on failure
               ;; possibly with line number?
               ))

(def data-grouped
  (->> data
       (group-by (fn [event] (.getDay (:start event))))))

(defn day-of-week-print [index]
  {:by-project (apply merge (total-time-by-project (get data-grouped index)))
   :total (-> data-grouped
              (get index)
              (total-time)
              (float-str->dur))})

(def week {:mon 1 :tue 2 :wed 3 :thu 4 :fri 5 :sat 6 :sun 0})

;;
;; General time log by project, weekday, and totals
;;

(dorun (->> week
            (map
             (fn [[day-of-week num]]
               (let [heading (str "======== " (name day-of-week) " =======")
                     data (day-of-week-print num)]
                 (println heading)
                 (println "----- by project ---")
                 (pprint (:by-project data))
                 (println "----- total --------")
                 (pprint (:total data))
                 (println))))))

(println "================ all ================")
(println "---------------- by project ---------")
(pprint (total-time-by-project data))
(println "---------------- total --------------")
(pprint (float-str->dur (total-time data)))

;; special report by project

;;
;; Report for project by date
;;

;; use
;; $ parse-time-log file1 file2 | tee project-YYYY-MM.md to store reports

;; (def this-project :home-plate)

;; (def data-for-project (->> data
;;                            (group-by #(:project %))
;;                            (this-project)
;;                            (group-by (fn [event] (.valueOf
;;                                                   (new js/Date
;;                                                        (.toDateString (:start event))))))
;;                            (into (sorted-map))
;;                            ))

;; (println (str
;;           "# "
;;           (name this-project)
;;           " "
;;           (->> data-for-project
;;                (first)
;;                (first)
;;                ((fn [val-of] (.toDateString (new js/Date val-of)))))
;;           " - "
;;           (->> data-for-project
;;                (last)
;;                (first)
;;                ((fn [val-of] (.toDateString (new js/Date val-of)))))
;;           " #"))
;; (println)
;; (dorun (map (fn [[date events]]
;;               (println (str "## " (.toDateString (new js/Date date)) " ##"))
;;               (dorun (map (fn [event]
;;                             (println (str "- " (:description event))))
;;                           events))
;;               (println))
;;             data-for-project))
