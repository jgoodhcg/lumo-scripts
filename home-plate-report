#!/usr/bin/env lumo
;; -*- mode: clojurescript -*-

(require '[cljs.pprint :refer [pprint]]
         '[lumo.io :as io]
         '[cljs.reader :refer [read-string]]
            )

(def paths *command-line-args*)

(def files (map #(io/slurp %) paths))

(def raw-data (flatten (map #(-> % (read-string)) files)))

(defn string->date [string]
  (as-> string s
    (.split s " ")
    (map js/parseInt s)
    (apply #(new js/Date %1 (- %2 1) ;; decrement month for sane data logging
                 %3 %4 %5) s)))

(def data (->> raw-data
               (filter (fn [{:keys [start stop project description]}]
                         (and (some? start) (some? stop)
                              (not (empty? start))) (not (empty? stop))))
               (map (fn [{:keys [start stop project description]}]
                      (let [start-time (string->date start)
                            stop-time  (string->date stop)]
                        {:start start-time
                         :stop stop-time
                         :project project
                         :description description})))
               (filter #(= (:project %) :home-plate))))

(defn get-duration-float [{:keys [start stop]}]
  (.toFixed
   (->> (- (.valueOf stop)
           (.valueOf start))
        (* (/ 1 1000)) ;; ms->s
        (* (/ 1 60))   ;; s->m
        (* (/ 1 60))   ;; m->h
        )
   2))

(defn float-str->dur [str]
  (let [split-up (.split str ".")
        hours (js/parseInt (first split-up))
        fraction (/ (js/parseInt (last split-up)) 100)
        minutes (* 60 fraction)]

    {:h hours :m (.round js/Math minutes)}))

(dorun (->> data
            (map (fn [{:keys [start stop project description]}]
                   (println (str (float-str->dur
                                  (get-duration-float {:start start
                                                       :stop stop}))
                                 " - "
                                 (.toDateString start)
                                 " - "
                                 description))))))
